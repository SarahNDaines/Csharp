Classes:
--------------------
- Can define in the Program class, but not inside main
- can also define in a separate file named the same as the class name
- class names are normally PascalCase?
- instantiate a new instance of class using new keyword
  - instances are of the type of the class
  - in the example below f is an instance of Forest
  - f also has a type Forest

example
---
class Forest {
}

Forest f = new Forest();

- data in an object is called fields
- it is one type of a class member
- below the value of name and trees aren't set so they have default values
    - int default value is 0
    - string default value is null  
    - bool default value is false
- use lowercase to name fields
- fields can be accessed and set using dot notation

class Forest {
  public string name;
  public int trees;
}

- properties are another type of class member
    - has two methods get() and set()
    - can use getter and setter for validation
    - common to name the property the uppercase version of the field
    - set uses keyword value, this represents the value passed as arg

public int area;
public int Area
{
  get { return area; }
  set { area = value; }
}

    - using setter for validation

public int Area
{
  get { return area; }
  set 
  { 
    if (value < 0) { area = 0; }
    else { area = value; }
  }
}

- automatic property
    - we can default the getter and setters with no other logic using the following

public string size;
public string Size
{
  get { return size; }
  set { size = value; }
}

    - becomes the following 
        - note that we don't define the field size separately

public string Size
{ get; set; }

- Acess modifiers
    - using public for the fields makes it so they can access the properties directly without use the getter and setter 
    - public member can be accessed by any class
    - private can only be accessed by code in the same class
    - classes default to public
    - class members default to private
    - can set get() or set to private or just not define

public int Area
{
  get { return area; }
  private set { area = value; }  
}

- class methods
    - define a method in a class similar to how methods are defined normally
    - remember that to use getter and setter you use the property which is capitalized to get and set the value
    - you can use += and -= with properties and fields

class Forest {
  public int Area
  { /* property body omitted */  }
  public int IncreaseArea(int growth)
  {
    Area = Area + growth;
    return Area;
  }
}

- class constructors
    - called when a new object is created
    - used to initialize values for the instance
    - no return type
    - name is same as the class
    - if no constructor is defined a parameterless constructor is created and used

    class Forest
{
  public int Area;
 
  public Forest(int area)
  {
    Area = area;
  }
}

- this keyword
    - use to avoid code like `Area = area;`
    - which is ambigous
    - refer to the current instance 

class Forest
{
  public int Area
  { /* property omitted */ }
 
  public Forest(int area)
  {
    this.Area = area;
  }
}

- Overloading
    - like other methods we can also overload constructors
    - usefull to define different method signatures

public Forest(int area, string country)
{ 
  this.Area = area;
  this.Country = country;
 }

public Forest(int area)
{ 
  this.Area = area;
  this.Country = "Unknown";
}

- Default arguments version C# > 4.0
    - can use default arguments when overloading to reduce the amount of code to change with updates

public Forest(int area, string country = "Unknown")
{
  this.Area = area;
  this.Country = country;
}

- Can also use :this() with version C# <= 4.0
    - used to refer to another constructor in the same class
    - the arguments types and order still has to match.
    - basically  like super in Ruby
 
 public Forest(int area, string country)
{ 
  this.Area = area;
  this.Country = country;
}

public Forest(int area) : this(area, "Unknown")
{ 
  Console.WriteLine("Country property not specified. Value defaulted to 'Unknown'.");
}

- Static
    - means associated with the class, not instance
    - comes after the access modifire of the class member
    - accessing using dot notation with the class name not the instance name
        - f.definition would raise an error

class Forest
{
  private static string definition;
  public static string Definition
  { 
    get { return definition; }
    set { definition = value; }
  }
}

static void Main(string[] args)
{
  Console.WriteLine(Forest.Definition);
}

    - can also add static to a method
        - can only access static members

class Forest
{
  private static string definition;
  public static void Define()
  { 
    Console.WriteLine(definition); 
  }
}

    - can also create static constructors
        - run once before class is created
        - run before an instance is made from the class
        - and before static members are accessed
        - can't use access modifier with static constructors

class Forest 
{
  static Forest()
  { /* ... */ }
}

    - can create static classes
        - can't instantiate from a static class
        - usefull for utility classes like Math or Console
        - they are tools, they don't store specific information

Math.Min(34, 54);
Console.WriteLine("yeehaw!");

- Static Errors
    - using access modifier with static constructor
error CS0515: 'Forest.Forest()': static constructor cannot have an access modifier

    - trying to reference a non static member from a class
error CS0120: An object reference is required to access non-static field, method, or property 'Forest.Grow()'

    - trying to reference a static member from an instance instead of the class
error CS0176: Member 'Forest.TreeFacts' cannot be accessed with an instance reference; qualify it with a type name instead

- Main() method
    - method of the Program class
    - public: can be called outside the program class
    - static: called using class name instead of instance
    - void: doesn't return a value
    - one argument `string[] args`
        - array of strings
    - dotnet run calls the Main() method
    - can pass arguments to main after the command

class Program
{
  public static void Main (string[] args) 
  {
  }
}

dotnet run mango pineapple lychee
// passes ["mango", "pineapple", "lychee"] to main method

--------------------------------------------------------
Interfaces
----------

- interface is declaring the methods and properties that an instance from a class must have
- doesn't decide how they are implemented
- interface name starts with `I`
- properties and method bodies aren't defined
- should define an interface in a separate file like classes


interface IAutomobile
{
  string Id { get; }
  void Vroom();
}

- to show that a class uses an interface follow the name of the class with the name of the interface

class Sedan : IAutomobile
{
    public string Id {get;}
    public void Vroom() {
        Console.WriteLine("Vroom");
    }
}

- if the class doesn't have the properties and methods in the class then we will get the following error:
error CS0535: Sedan does not implement interface member 'IAutomobile.LicensePlate'

- Interfaces define what the class must have, but the class can have more then what the interface defines
- can't be used to specify fields and constructors
- can use interfaces to group classes that behave similarly

- classes can implement more then one interface

- Csharp has inheritence to avoid duplicating code


----------------------------------------------------------------
Inheritence

- can only inherit from one class
- inherit, writing colon followed by the class name to inherit from followed by any interfaces separated by commas
- the class it inherits from should come before any interfaces
- in the following example the class sudan inherits from Vehicle
    - it has the IAutomobile interface

class Sedan : Vehicle, IAutomobile
{
}

- use `protected` access modifier to allow the parent class and any classes that inherit from the parent class to access that class member

- use `base` keyword to refer to superclass inside subclass
    - if the class Vehicle defines SpeedUp
    - and in the subclass we want to access that method
    - the following example shows how
base.SpeedUp();

- to use the superclass constructor
    - to call with parameters use the following
    - assumes that Vehicle has a constructor that takes one double parameter
    - note that calling the superclass constructor that we use colon followed by base with the parameter names (not types) in parantheses

class Sedan : Vehicle
{
  public Sedan (double speed) : base(speed)
  {
  }
}

    - will call vehicle constructor with no params if not defined
        - withoud explicit call to base() it will implicitly call the default parameterless constructor for superclass

class Sedan : Vehicle
{
  // Implicitly calls base(), aka Vehicle()
  public Sedan (double speed)
  {
  }
}

        - is equivalent to:

{
  public Sedan (double speed) : base()
  {
  }
}

        -  This code will ONLY work if the constructor Vehicle() exists. If it doesnâ€™t, then an error will be thrown.
            - when does the default parameterless constructor not exist?
            - when we explicitly define a constructor then there is no longer a constructor without parameters automatically created.

- override
    - used to change how the superclass method works in a subclass
    - mark the method in the superclass with the keyword `virtual` saying that this might be overridden
    - in the subclass mark the method with `override` to indicate that you are overriding the method

// superclass
public virtual void SpeedUp()

// subclass
public override void SpeedUp()

    - hidding a method in a superclass with the method in the subclass with the same name is another solution
        - define method with same name in subclass as superclass
        - don't use virtual and override keywords
        - more confusing and not best practice
    - another solution is `new`
        - didn't explain but said that using virtual and override is still preferred for its clarity

- abstract
    - used to define a method in superclass that must be overridden in the subclass
        - the method overriding it must use    `override` keyword
    - if a superclass has an abstract method
        - it has a method that isn't defined
        - can't have any instances
        - therefor the class itself must also be abstract

// abstract method
public abstract string Describe();

// abstract superclass
abstract class Vehicle

    - if you don't set the superclass as abstract you will get the following error

error CS0513: 'Vehicle.Describe()' is abstract but it is contained in non-abstract class 'Vehicle'

// overriding abstract method in subclass
public override string Describe()
{
  return $"This Sedan is moving on {Wheels} wheels at {Speed} km/h, with license plate {LicensePlate}.";
}
