fundamental concepts, such as variables, data types, loops, conditionals, and functions.

Creating a csharp file
- extension is `.cs`

- log to console:
Console.WriteLine("Hello World!");

- read input from User:
  - always returns a string
  - to get an integer from the input need to convert from string to int type
Console.WriteLine("How old are you?");
string input = Console.ReadLine();
Console.WriteLine($"You are {input} years old!");

- run file
dotnet run(enter) 

- comments // and /* ... */
- end lines with semicolon

- variables use campleCasing
string iAmAVariable;
string i'mnot; // this will cause errors


------------------------------------------------------------------------------------
DataTypes:
- C# is strongly typed > requires specifying data types being used;
- static typed > check that correct types used before program can run;

common c# data types
- int
- double: more accurate precision then float
- string
- char: single character
- bool

Other types
- long: whole nums, longer range
- float
- decimal: monitary values
- DateTime

create static typed var
- two lines
// Declare an integer
int myAge;
myAge = 32;
- one liner
// Declare a string
string countryName = "Netherlands";

Errors:
- forget to set type for randomData:
The name 'randomData' does not exist in the current context [CS0103:] 
- using wrong type definition:
Cannot implicitly convert type 'double' to 'int'. An explicit conversion exists (are you missing a cast?)

change type of var from one type to another
- implicity conversion > storing an int in a double var doesn't lose any data
int myInt = 3;
// Turn it into a double
double myDouble = myInt;
- explicit conversion
  - required when data would be lost (eg double to int)
  - requires a cast operator
double myDouble = 3.2;
// Round myDouble to the nearest whole number
int myInt = (int)myDouble;
- also generally a Convert.toX() method
  - Convert.ToString() and Convert.ToDouble()
  - can't explicitly convert a string to an int
    - use Convert.ToInt32() instead
    - article https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/how-to-convert-a-string-to-a-number
Console.Write("Enter your favorite number!: ");
int faveNumber = Convert.ToInt32(Console.ReadLine());

----
Numberic DataTypes
- int
- float
- double: more precise then float, but quicker to calculate then decimal
  - you can save an int as a double, giving it the double type just allows it to have decimal values later
double rate = 30;
 Console.WriteLine(rate); // prints 30 not 30.0
- decimal: use for monitary applciations for highest precision
  - number followed by m to indicate it is a decimal not double
decimal variableName = 489872.76m;

Arithmatic operations
- plus subtract mult, devide
- use two ints will always return an int
- using an int with a double will return a double
Console.WriteLine(5 / 3);
Console.WriteLine(5 / 3.0);
// prints 1
// prints 1.66667
- shortcuts
  - can use ++ and --
  - can also use += and -=
- modulo %
  - returns the remainder?
- built in methods
- Math.Abs()—will find the absolute value of a number. Example: Math.Abs(-5) returns 5.
- Math.Sqrt()—will find the square root of a number. Example: Math.Sqrt(16) returns 4.
- Math.Floor()—will round the given double or decimal down to the nearest whole number. Example: Math.Floor(8.65) returns 8.
- Math.Min()—returns the smaller of two numbers. Example: Math.Min(39, 12) returns 12.
- NaN > not a number

----------
Text DataTypes
- string
  - use backslash to escape characters in string like " or \n
  - string concatenation usesing +
string yourFaveMusician = "David Bowie";
string myFaveMusician = "Solange";
Console.WriteLine("Your favorite musician is " + yourFaveMusician + " and mine is " + myFaveMusician + ".");
  - concatenation with a string and something else will convert that other type to a string implicitly
  - string interpolation (introduced version 6);
    - string starts with $, insertion done with curly braces:
string yourFaveMusician = "David Bowie";
string myFaveMusician = "Solange";
Console.WriteLine($"Your favorite musician is {yourFaveMusician} and mine is {myFaveMusician}.");
  - Length
userTweet.Length; // returns the length of the tweet
  - IndexOf
    - returns negative 1 if substring or char not found
string word = "radio";
word.IndexOf("a"); // returns 1
  - Substring(start, length);
    - first arg is the starting index
    - second arg is optional length of the substring, if not provided defaults to taking from starting index to end;    
    - non mutating?
string name = "Codecademy"; 
int start = 2;
int length = 6;
string substringName = name.Substring(start, length); // returns 'decade'
---
string plantName = "Cactaceae, Cactus"; 
int charPosition = plantName.IndexOf("Cactus"); // returns 11
string commonName = plantName.Substring(charPosition); // returns Cactus
  - bracket notation to access char at index
string plantName = "Cactaceae, Cactus";
int charPosition = plantName.IndexOf("u"); // returns 15
char u = plantName[charPosition]; // returns u
  - ToUpper, ToLower > all uppercase or lowercase

- char


--------------------------------------------------------------
Boolean Data Types

type bool
- used to store true and false
- different then "true" and "false"
comparison Operators
- ==, !=, <, >, <=, >=
Operators
- &&   > and
- ||   > or
- !    > not

-----------------------------------------------------------------
Conditional Statements
- If statements
  - indent code inside curly braces 2 spaces

string color = "blue";
if (color == "blue")
{
  Console.WriteLine("color is blue");
}

- If…Else… statements
- Else if statements
  - else statement is optional but should come after any else statements

string color = "red";

if (color == "blue")
{
  // this code block will execute only if the value of color is 
  // equivalent to "blue"
  Console.WriteLine("color is blue");
} 
else if (color == "red")
{
  // this code block will execute if the value of color is 
  // equivalent to "red"
  Console.WriteLine("color is NOT blue");
} 
else // this is optional
{
  // this code block will execute if the value of color is 
  // NOT equivalent to "blue" OR "red"
  Console.WriteLine("color is NOT blue OR red");
}

- Switch statements
  - single curly braces around the entire switch block and each case doesn't have curly braces
  - value being compared goes in parenthesis after switch;
  - include break statements in each case
  - must have a default case
  - case value semicolon
    - indented code 

string color;

switch (color)
{
   case "blue":
      // execute if the value of color is "blue"
      Console.WriteLine("color is blue");
      break;
   case "red":
      // execute if the value of color is "red"
      Console.WriteLine("color is red");
      break;
   case "green":
      // execute if the value of color is "green"
      Console.WriteLine("color is green");
      break;
   default:
      // execute if none of the above conditions are met
      break;
}

- Ternary Operators
  - wrap statement that is being evaluated in parenthesis

string color = "blue";
string result = (color == "blue") ? "blue" : "NOT blue";
Console.WriteLine(result);


----------------------
Loops

While Loop
---
while (condition) 
{
  statement;
}

Do While Loop
---
do
{
  statement;
} while (condition);

For Loop
---
for (initialization; stopping condition; iteration statement)
{
  statement;
}

For Each Loop
------
- useful for iteratating over a collection
- NOTE!!!
  - we type the item in the collection, not the collection
string[] melody = { "a", "b", "c", "c", "b" };
foreach (string note in melody)
{
  PlayMusic(note);
}

Break
- used to terminate a loop
-----
while (playerIsAlive) 
{ 
// this code will keep running

  if (playerIsAlive == false) 
  { 
    // eventually if this stopping condition is true, 
    // it will break out of the while loop
    break; 
   } 
 } 

// rest of the program will continue

Continue
- used to skip part of a loop
-----------
int bats = 10;

for (int i = 0; i <= 10; i++)
{
  if (i < 9)
  {  
    continue;
  }
  // this will be skipped until i is no longer less than 9
  Console.WriteLine(i);
}

Return
- used to exit a method and return a value
  so it can be used to exit a loop in a method
----
class MainClass {
 public static void Main (string[] args) {
   UnlockDoor();

  // after it hits the return statement, it will move on to this method
   PickUpSword();
 }

 static bool UnlockDoor()
 {
   bool doorIsLocked = true;

   // this code will keep running
   while (doorIsLocked)
   {
     bool keyFound = TryKey();

      // eventually if this stopping condition is true,
      // it will break out of the while loop
     if (keyFound)
     {
      // this return statement will break out of the entire method
      return true;
     }
   }
   return false;
 }
}


---------------------------------------------------------------------
References in Csharp

- classes are reference types
  - when creating a new instance the var stores a reference to the object

Dissertation diss1 = new Dissertation();
Dissertation diss2 = diss1;
diss1.CurrentPage = 0;
diss2.CurrentPage = 16;
Console.WriteLine(diss1.CurrentPage); //16
Console.WriteLine(diss2.CurrentPage); //16
  - because the variables reference the same objectline 345 and 346 change the CurrentPage of the object to 0 and then 16

- int is a value type
  - the var stores the value

int num = 6;
int num2 = num;
num2 = 7;
Console.WriteLine(num) // 6
Console.WriteLine(num2) // 7

  - these reference different values because the var stores the value not a reference
  - so asigning num2 to 7 is a reassignment
  - All primative data types are value types:
int
double
bool
char

- reference vs value comparison
  - when comparing two vars with ==
  - values compare if they have the same value
  - references compare if they reference the same object

Dissertation d1 = new Dissertation(50);
Dissertation d2 = new Dissertation(50);
Console.WriteLine(d1 == d2);
// Output: false

  - because they reference two different objects they are not the same even though they  were instantiated the same
- referencing different types
  - an object can be typed with the class or the interface
  - since a class can have more methods then the interface, typing by the interface means that it will only expect the methods in the interface
  - if we assign a new variable to the reference to the instance from the class, but type it with the interface
    - then when using the new var we can only use the methods defined in the interface

Dissertation diss = new Dissertation(50);
IFlippable fdiss = diss;

diss.Flip();
fdiss.Flip();
Console.WriteLine(diss.Define());
// This causes an error! since Define() is not defined in the interface
Console.WriteLine(fdiss.Define());

  - this applies to base classes as well
    - the superclass Book, does not have the method Define() defined in the class

Dissertation diss = new Dissertation(50);
Book bdiss = diss;
Console.WriteLine(diss.Title);
Console.WriteLine(bdiss.Title);
diss.Define();
// This causes an error!
bdiss.Define();

- Array of references
  - if we wanted to flip a set of objects we can use the type of the Interface that ensures they have the method Flip for the array
  - then we can loop through the array to flip all the objects

IFlippable[] classroom = new IFlippable[] { new Diary(1), new Diary(30), new Dissertation(50), new Dissertation(49) };

foreach (IFlippable f in classroom) 
{
  f.Flip();
}

- polymorphism
  - objects of different types have common interface
  - objects maintain functi their type
    - the method Bark() can be implemented differently between two classes that both use Bark, but are called with the same type and number of params

Book bk = new Book();
Book bdiss = new Dissertation();
Console.WriteLine(bk.Stringify());
Console.WriteLine(bdiss.Stringify());onality unique to

//This is a Book object!
//This is a Dissertation object!

--------------
- Casting

Dissertation diss = new Dissertation();
Book bdiss = diss;
IFlippable fdiss = diss;
  
  - upcast: using a reference up inheritence heirchy, a superclass
    - After upcasting, you can treat the object as if it were an instance of the base class.
    - Properties and methods specific to the derived class (not present in the base class) won’t be accessible.
    - This conversion is implicit, meaning you don’t need to specify the cast explicitly.

Animal animal = new Snake(); // Upcasting
Here, Snake (a derived class) is upcast to Animal (the base class).


  - downcast: using a reference from lower in the inheritence heirchy, subclass
    - done explicitly and may succeed only if the object is compatible with the target type.
    - Use the as operator for downcasting; it evaluates to null if the cast fails.
      - other option: `is` operators

var feline = (Feline)animal; // Downcasting
// Here, animal (of type Animal) is downcast to Feline.

Book bk = new Book();
Dissertation bdk = (Dissertation)bk;
// bk of type Book is downcase to Dissertation

  - Remember, upcasting is safe and always succeeds, while downcasting requires caution and runtime checks

- Null and unassigned references
  - used to show that a reference is missing
  - used for reference variables that haven't been set yet
  - used to initialize an empty array of references

// reference missing
Diary dy = null;

// create reference var without value
Diary dy;
// dy is unassigned

// create empty array of reference types
Diary[] diaries = new Diary[5];
// diaries[1] is unassigned, diaries[2] is unassigned, etc.

  - can only check for null reference if it is explicitly assigned to null

Diary dy = null;
Console.WriteLine(dy == null);
// Output: true

Object o;
Console.WriteLine (o == null);
// error CS0165: Use of unassigned local variable 'o'

- reference and corresponding object don't have to have the same type
- functionality of a variable is limited by the reference type, not the object it references type

---------
Object
- reference type that can be used to type all objects
- all classes derived from Object class
- can type all objects as Object
  - lose functionality of specific class
  - lose type checking that prevents errors

  - can safely type any unknown object as Object
  - can access all methods from Object class

- value types and strings also inherit from Object

- usefull members of Object class
- Equals(Object) — returns true if the current instance and the argument are equal (using value equality for value types and referential equality for reference types)
- GetType() — returns the type of the object
- ToString() — returns a string describing the object

- The Equals() and ToString() methods in Object are virtual, so they can be overridden.

class Diary
{
  /* other members omitted */

  public override string ToString()
  {
    return $"This Diary is currently on page {CurrentPage}."; 
  }
}

Diary dy = new Diary(7);
Console.WriteLine(dy.ToString());
// Output: "This Diary is currently on page 7."

- the method ToString() is called with Console.WriteLine()
  - the following lines are equivalent

Console.WriteLine(b);
Console.WriteLine(b.ToString());


-----------
keyword var
- introduced in v3.0
- used for implicit typing
- can be used for local variables inside code blocks
  - methods, loops...
- can't use as return type
- can't use as method parameter